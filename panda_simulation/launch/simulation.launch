<launch>
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find franka_description)/robots/panda_arm_hand.urdf.xacro" />

    <!-- GAZEBO arguments -->
    <arg name="paused" default="false" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />

    <!--launch GAZEBO with own world configuration -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find panda_simulation)/world/franka.world"/>
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
    </include>

    <!-- Spawn Robot -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -z 0.2 -model panda" />
 
    <!-- Spawn Object while launching -->
    <!--node name="spawn_bowl_urdf" pkg="gazebo_ros" type="spawn_model" args="-file $(find panda_simulation)/objects/urdf/bar_clamp.urdf -urdf -model bar_clamp -x 0.4 -y 0 -z 1.1" -->
    
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find panda_simulation)/config/panda_control.yaml" command="load" />

    <!-- load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller panda_arm_controller" />
    <node name="controller_spawner_hand" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="panda_hand_controller" />

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
  
    <!-- Launch MoveIt! Rviz -->
    <include file="$(find panda_moveit_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="true" />
    </include>
    <include file="$(find panda_moveit_config)/launch/move_group.launch" />
    <group if="$(arg gui)">
        <include file="$(find panda_moveit_config)/launch/moveit_rviz.launch" />
    </group>

    <node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="joint_states joint_states_desired" />

    <!-- launch robot control node for moveit motion planning -->
    <node pkg="panda_simulation" type="robot_control_node" name="robot_control_node" output="screen" />

    <!-- run custom node for automatic intialization -->
    <!--node pkg="panda_simulation" type="robot_state_initializer_node" name="robot_state_initializer_node" -->
    
   <node pkg="panda_simulation" type="test5.py" name="test" output="screen" respawn="true" />
   <node pkg="panda_simulation" type="merkez.py" name="camera" output="screen" respawn="true" />
   <node pkg="panda_simulation" type="adım.py" name="adım" output="screen" respawn="true" />
   <node pkg="panda_simulation" type="konum_2.py" name="konum" output="screen" respawn="true" />
   <node pkg="panda_simulation" type="görüntüye_git_2.py" name="görüntüye_git" output="screen" respawn="true" />
   
   
   


    <!--Obtain depth image in Moveit and Gazebo -->
    <include file="$(find realsense_gazebo_plugin)/launch/depth_proc.launch"/>

</launch>
